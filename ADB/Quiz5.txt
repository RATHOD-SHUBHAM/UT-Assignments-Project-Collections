
Name: Shubham Shankar
Last 4 digits ID: 1001761068

CSE 6331, Cloud Computing					

Quiz Q5, 1.00, Summer 2020   (c) DL, UTA, 2020


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.

 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     12 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     ANY VIOLATIONS to scholastic honesty, which include working with others during this quiz, communicating with others during
     this quiz, giving anyone or recieving from anyone any information during this quiz or for the next 6 hours after completion
     of this quiz is a honors violation and will result in a -100 points being assessed for this quiz and being reported. 

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, please send the link, raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here:
     _________________SS -------------------------

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4a. Using the cloud services provider, all functionality possible should be implemented on that provider.
     (Of course, displaying web pages through a browser and the user interface is "local")

 4b. Upload all data files (not this quiz) to cloud service. 
  
Show and submit code, when each part is complete, raise your hand and then show us:

 To recieve credit you MUST show (demo) AND submit the code (text only) on Canvas.

  5. Show a web page and interface (which resides on the cloud provider) with your name,
     and below that, Student ID at the top of every web page dispayed 
     (for this quiz). 
     Please use a large font.
    
     The cloud service providers are Microsoft Azure or Amazon AWS. You may use either as you wish.

  6. Please show a page, where a user can give a value N, and you will show the N most frequent and N least frequent
     characters (ALL "printable"/visable characters, ie numbers, punctuation, not spaces, not tabs, etc.) 
     in the document "l". Then list the most frequent N character pairs (2 two adjacent characters).



@application.route('/quizsix',methods=['GET','POST'])
def quizsix():
    num = int(request.args.get('num'))
    print(num)

    filename = 'try.txt'
    file = open(filename, 'rt',encoding="utf-8")
    text = file.read()
    file.close()
    splitWord = text.split(".")
    print("\n\n\n")
    print("the words are : ",splitWord)

    nospace = []
    for i in splitWord:
        i = i.replace("\r", "").replace("\n", "")
        nospace.append(i)
    print("\n\n\n")
    print(nospace)

    sentenceSplit = []
    for i in nospace:
        i = i.split(" ")
        sentenceSplit.append(i)
    print("\n\n\n")
    print(sentenceSplit)

    charSplit = []
    for i in sentenceSplit:
        for j in i:
            j = j.split(",")
            charSplit.append(j)
    print("\n\n\n")
    print(charSplit)


     # Python3 program to Split string into characters 
    def split(word): 
        return [char for char in word]

    wordSplit = []
    for i in charSplit:
        for j in i:
            print("j",j)
            word = j
    #         j = split(j)
            wordSplit.append(split(word))
    print("\n\n\n")
    print("the word split is : ",wordSplit)


    letterSplit = []
    for i in wordSplit:
        for j in i:
            letterSplit.append(j)
    print("\n\n\n")
    print("letter split is : ",letterSplit)


    LetterCount = Counter(letterSplit)
    mostCommon = LetterCount.most_common(num)
    print("\n\n\n")
    print("the most common word is : ",mostCommon)
    leastCommon = LetterCount.most_common()[-num:]
    print("\n\n\n")
    print("the least Common word is ",leastCommon)

    return render_template('name_record.html',output=mostCommon,output1 =leastCommon )


<h2>six 6</h2>
<form action="/quizsix" method="get">
    <label>Enter the value N : </label><br />
    <input type="number" name = "num" value="3"><br><br>
    <input type="submit" value="Submit"><br /><br />
</form>

<h1>Most Common word<p>{{output}}</p></h1>
<h2>LeastCommon Word<p>{{output1}}</p></h2>


  7. In a web page, where the user can "paste" an HTML document, where HTML tags will have a "<tag>" 
     (tag will be a word like "strong", but will always start with "<") and an end like </tag>, 
     the user will paste HTML and you will give a list of all the HTML tags, first list all starting tags, 
     then list all ending tags. If a tag appears more than once, just list once, and it's frequency.

@application.route('/quizseven',methods=['GET','POST'])
def quizseven():
    htmltag = request.args.get('htmltag')
    print("the html tag is : ",htmltag)

    splittag = htmltag.split("<")
    print("the split tag is : ",splittag)

    splitslash = []

    for i in splittag:
        i= i.split("/>")
        splitslash.append(i)

    print("the splitslash: ",splitslash)

<h2>seven</h2>
<form action="/quizseven" method="get">
    <label for = "htmltag">HTML TAG : </label><br />
    <input type="text" name = "htmltag"><br><br>
    <input type="submit" value="Submit"><br /><br />
</form>




  8. Similar to question 7, allow a user (in a web form) to give a substitution tag and the HTML text, 
     where the user can, for example, substitute "<h2>" for all occurances of "<h3>", 
     you should handle begin and end tags.

<h2>eight</h2>
<form action="/quizeight" method="get">
    <label for = "htmltag">HTML TAG : </label><br />
    <input type="text" name = "htmltag"><br><br>
    <label for = "subtag">sub TAG : </label><br />
    <input type="text" name = "subtag"><br><br>

    <input type="submit" value="Submit"><br /><br />
</form>

  9. For the given HTML text, show all adjacent HTML tags, (ie bigrams that are HTML).
<h2>nine</h2>
<form action="/quiznine" method="get">
    <label for = "htmltag">input : </label><br />
    <input type="text" name = "htmltag"><br><br>

    <input type="submit" value="Submit"><br /><br />
</form
 
 10. Show us, in a link, the application running and we will try it out. Only for parts 6, 7, 8

 11. When complete, return (send) this quiz
     If you finish early, send this immediately, otherwise send between
     the end of class and no more than 1 minute after that.

